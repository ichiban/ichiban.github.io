<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>y1ban.com</title>
    <link>https://y1ban.com/</link>
    <description>Recent content on y1ban.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 29 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://y1ban.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2020-04-13</title>
      <link>https://y1ban.com/diary/2020/04/13/</link>
      <pubDate>Mon, 13 Apr 2020 15:44:47 +0900</pubDate>
      
      <guid>https://y1ban.com/diary/2020/04/13/</guid>
      <description>昨晩のオンライン飲み会が楽しく、大幅に寝坊して10時頃起床。朝食は食べず。 昼。大雨なので、人を避ける絶好の機会とスーパーに買い出しに行く。ス</description>
    </item>
    
    <item>
      <title>2020-04-12</title>
      <link>https://y1ban.com/diary/2020/04/12/</link>
      <pubDate>Sun, 12 Apr 2020 16:13:29 +0900</pubDate>
      
      <guid>https://y1ban.com/diary/2020/04/12/</guid>
      <description>ゆっくり起き、昨日買ったセブンのちょっといい厚切りの食パンを一枚トーストして発酵バターを塗って食べる。コーヒーのドームがやけによく膨らむ。焙</description>
    </item>
    
    <item>
      <title>2020-04-11</title>
      <link>https://y1ban.com/diary/2020/04/11/</link>
      <pubDate>Sat, 11 Apr 2020 14:17:19 +0900</pubDate>
      
      <guid>https://y1ban.com/diary/2020/04/11/</guid>
      <description>旧オフィスの入館証を送り返す必要があり、かつ朝食的なものが何も無くなっていたので5:30ごろマスクをしてセブンへ行く。セブンにつくとレジの上</description>
    </item>
    
    <item>
      <title>2020-04-10</title>
      <link>https://y1ban.com/diary/2020/04/10/</link>
      <pubDate>Fri, 10 Apr 2020 11:11:16 +0900</pubDate>
      
      <guid>https://y1ban.com/diary/2020/04/10/</guid>
      <description>また寝坊してゴミを出しそびれる。-5点。 朝食に目玉焼き、ミニトマト、冷凍アスパラ。パンがもうないので我慢。 ベニーから連絡。やはりベニーもTi</description>
    </item>
    
    <item>
      <title>2020-04-09</title>
      <link>https://y1ban.com/diary/2020/04/09/</link>
      <pubDate>Thu, 09 Apr 2020 21:48:13 +0900</pubDate>
      
      <guid>https://y1ban.com/diary/2020/04/09/</guid>
      <description>朝はセブンの冷凍ビスケット。明日の朝食からどうしよう。 昼はUber eatsでモスバーガー。下北沢店だったが、いいコンディションで届いた。前回</description>
    </item>
    
    <item>
      <title>2020-04-08</title>
      <link>https://y1ban.com/diary/2020/04/08/</link>
      <pubDate>Wed, 08 Apr 2020 11:17:29 +0900</pubDate>
      
      <guid>https://y1ban.com/diary/2020/04/08/</guid>
      <description>9:30ごろゆっくりと起床。すぐさまサポート対応を手伝う。都内は美容室が営業自粛となったためか、営業時間の変更と既存の予約との不整合が多発し</description>
    </item>
    
    <item>
      <title>2020-04-07</title>
      <link>https://y1ban.com/diary/2020/04/07/</link>
      <pubDate>Tue, 07 Apr 2020 00:01:24 +0900</pubDate>
      
      <guid>https://y1ban.com/diary/2020/04/07/</guid>
      <description>朝食はセブンの冷凍ビスケット。もえるごみの日だったが壮大に寝坊したので出せなかった。喧嘩稼業13巻が昨日出たのでそれを読みつつ寝ようとして、</description>
    </item>
    
    <item>
      <title>2020-04-06</title>
      <link>https://y1ban.com/diary/2020/04/06/</link>
      <pubDate>Mon, 06 Apr 2020 23:59:59 +0900</pubDate>
      
      <guid>https://y1ban.com/diary/2020/04/06/</guid>
      <description>朝食は冷凍アスパラとミニトマト、目玉焼きをスキレットで。フォカッチャが最後の一つだった。パンを買わねば。朝はドン・キホーテにアルコールかマス</description>
    </item>
    
    <item>
      <title>2020-04-05</title>
      <link>https://y1ban.com/diary/2020/04/05/</link>
      <pubDate>Sun, 05 Apr 2020 11:32:34 +0900</pubDate>
      
      <guid>https://y1ban.com/diary/2020/04/05/</guid>
      <description>5:30ごろセブンイレブンに行き、チョココロネと弁当、カップラーメン等を買い、ついでにポテトチップス２袋を買うなど。昨日コナーに勧められたT</description>
    </item>
    
    <item>
      <title>2020-04-04</title>
      <link>https://y1ban.com/diary/2020/04/04/</link>
      <pubDate>Sat, 04 Apr 2020 16:11:41 +0900</pubDate>
      
      <guid>https://y1ban.com/diary/2020/04/04/</guid>
      <description>朝はプンパニッケルにカッテージチーズの残りすべてとメープルシロップ。新しい瓶を開けた。 昼はUber eatsでいきなりステーキを頼んでみた。ア</description>
    </item>
    
    <item>
      <title>2020-04-03</title>
      <link>https://y1ban.com/diary/2020/04/03/</link>
      <pubDate>Fri, 03 Apr 2020 11:03:44 +0900</pubDate>
      
      <guid>https://y1ban.com/diary/2020/04/03/</guid>
      <description>朝食は目玉焼き、アスパラ、ミニトマト、フォカッチャ。昼はオリジンのとんかつ弁当をUber eatsで。夜は鍋にするだろう。</description>
    </item>
    
    <item>
      <title>2020-04-02</title>
      <link>https://y1ban.com/diary/2020/04/02/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://y1ban.com/diary/2020/04/02/</guid>
      <description>午前中に母から着信あり。昼過ぎに返す。不審な司法書士事務所からの手紙について。父方の祖父の腹違いの妹からの遺産相続手続きに関するものだった。</description>
    </item>
    
    <item>
      <title>2020-04-01</title>
      <link>https://y1ban.com/diary/2020/04/01/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://y1ban.com/diary/2020/04/01/</guid>
      <description>今日も一日外出せずに過ごす。 朝食にはプンパニッケル２枚、それぞれカッテージチーズ＆オリーブ（生ハムがあればよかった）とカッテージチーズ＆メー</description>
    </item>
    
    <item>
      <title>「サイゼリヤで1000円あれば最大何kcal摂れるのか」を制約論理プログラミングで解く</title>
      <link>https://y1ban.com/saizeriya-problem-in-clp-fd/</link>
      <pubDate>Wed, 29 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://y1ban.com/saizeriya-problem-in-clp-fd/</guid>
      <description>はじめに 「サイゼリヤで1000円あれば最大何kcal摂れるのか」あるいはサイゼリヤ問題とは 「サイゼリヤのメニューを重複無しで合計1000円以</description>
    </item>
    
    <item>
      <title>Goで別パッケージの関数呼び出しは禁止すべき</title>
      <link>https://y1ban.com/avoid-external-function-calls/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://y1ban.com/avoid-external-function-calls/</guid>
      <description>はじめに Goのテストにおいて、別パッケージの関数呼び出しが問題となることを示し、その回避策とそれを徹底するための静的解析ツールを紹介する。 別</description>
    </item>
    
    <item>
      <title>Goのテストでヘルパー関数に t.Helper() を忘れない</title>
      <link>https://y1ban.com/dont-forget-t-helper/</link>
      <pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://y1ban.com/dont-forget-t-helper/</guid>
      <description>はじめに Goのテストにおいて、ヘルパー関数は t.Helper() を呼ぶことでヘルパー関数だとマークできる。 この記事では、ヘルパー関数としてマークしないとどうい</description>
    </item>
    
    <item>
      <title>Goの静的解析ツールで実装コードだけを走査する</title>
      <link>https://y1ban.com/scan-only-implementation-code-in-go/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://y1ban.com/scan-only-implementation-code-in-go/</guid>
      <description>はじめに Goの静的解析ツールは golang.org/x/tools/go/analysis を使うことで開発でき、構文木を走査するのに golang.org/x/tools/go/analysis/passes/inspect が使える。しかし実装コード以外も走査されるため、実装コードに焦点</description>
    </item>
    
    <item>
      <title>Goの実行ファイルにZIPでリソースを埋め込む</title>
      <link>https://y1ban.com/zip-asset-embedding-in-go/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://y1ban.com/zip-asset-embedding-in-go/</guid>
      <description>はじめに ZIPを用いた実行ファイルへのリソースの埋め込み方法があることを紹介し、実際にGoの archive/zip と zip コマンドと cat コマンド（と確認のために unzip コマ</description>
    </item>
    
    <item>
      <title>http.Transport はHTTPプロキシの先がHTTPかHTTPSかで挙動が違う</title>
      <link>https://y1ban.com/http-transport-behaves-differently-in-http-or-https/</link>
      <pubDate>Sun, 25 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://y1ban.com/http-transport-behaves-differently-in-http-or-https/</guid>
      <description>http.Client 等で内部的に使われている http.Transport はプロキシの利用を隠蔽するが、HTTPプロキシを利用しておりそのプロキシが CONNECT に対して 200 OK 以外のステータスコードを</description>
    </item>
    
    <item>
      <title>一発でセラーの中身をぶっこぬく（あるいはgoaでHAL&#43;JSON）</title>
      <link>https://y1ban.com/hal-json-in-goa/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://y1ban.com/hal-json-in-goa/</guid>
      <description>はじめに Goでweb APIを作る際にはgoaが便利だが、デザイン時にひと工夫することでAPIの柔軟性が増す。ここではgoaの例としてしばしば</description>
    </item>
    
    <item>
      <title>html/templateで共通のボイラープレートを使いまわして異なるコンテンツを出す</title>
      <link>https://y1ban.com/html-template-boilerplate/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://y1ban.com/html-template-boilerplate/</guid>
      <description>やりたいこと Goでwebアプリを書く際にサーバサイドで html/template を使って複数のコンテンツをHTMLにレンダリングするが、ボイラープレートを抜き出して</description>
    </item>
    
    <item>
      <title>リバース・プロキシはどのようなリクエスト／レスポンスのときにキャッシュするか？</title>
      <link>https://y1ban.com/when-does-a-reverse-proxy-cache/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://y1ban.com/when-does-a-reverse-proxy-cache/</guid>
      <description>メルカリでCDNのキャッシュに由来する情報流出があった。CDNでキャッシュしているのはリバース・プロキシで、ちょっと前にGoの練習を兼ねてリ</description>
    </item>
    
    <item>
      <title>JESI, or how to fill the gap between frontends and backends</title>
      <link>https://y1ban.com/json-edge-side-include/</link>
      <pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://y1ban.com/json-edge-side-include/</guid>
      <description>There&amp;rsquo;s a huge gap between frontend engineers and backend engineers. People just don&amp;rsquo;t realize it or ignore it as if it were a fate.
Aggregation Problem: who aggregates data and when? Let&amp;rsquo;s begin with a story: Furiosa is a talented frontend developer and Max is an experienced backend developer. They&amp;rsquo;re a team working on a movie database web app.
Their app has a feature to show movie details with actors appeared in it.</description>
    </item>
    
    <item>
      <title>Line Editor in Go</title>
      <link>https://y1ban.com/line-editor-in-go/</link>
      <pubDate>Sat, 10 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://y1ban.com/line-editor-in-go/</guid>
      <description>日本語版はこちら Introduction It&amp;rsquo;s easy to write an SSH server in Go. In most cases, your SSH server deals with command line inputs from users. Then, you&amp;rsquo;ll need a piece of software called a line editor which converts key strokes into string. In Go, it&amp;rsquo;s golang.org/x/crypto/ssh/terminal. Write an SSH Server Let&amp;rsquo;s write an SSH server. You&amp;rsquo;ll need golang.org/x/crypto/ssh to write an SSH server in</description>
    </item>
    
    <item>
      <title>GoでSSHサーバにラインエディタが欲しいなら golang.org/x/crypto/ssh/terminal</title>
      <link>https://y1ban.com/line-editor-in-go-ja/</link>
      <pubDate>Thu, 01 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://y1ban.com/line-editor-in-go-ja/</guid>
      <description>はじめに GoはSSHサーバを書くのもかんたんです。ほとんどの場合、あなたのSSHサーバはユーザからのコマンド入力を受け付けるものでしょう。そ</description>
    </item>
    
    <item>
      <title>How to parse string-or-number JSON in Golang</title>
      <link>https://y1ban.com/parse-string-or-number-json-in-go/</link>
      <pubDate>Sun, 30 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://y1ban.com/parse-string-or-number-json-in-go/</guid>
      <description>In this post, I&amp;rsquo;m going to explain how to parse JSON data with a field which can be either a string or number in Go.
Go has a great support for JSON. In many cases what you have to do is to define corresponding structs to parse JSON.
Let&amp;rsquo;s say we&amp;rsquo;re dealing with a Web API provided by some other company. It gives us a series of name-value pairs in this format:</description>
    </item>
    
    <item>
      <title>HTTP/1.1 Parser is Just a Function</title>
      <link>https://y1ban.com/http-parser-in-ocaml/</link>
      <pubDate>Sun, 23 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://y1ban.com/http-parser-in-ocaml/</guid>
      <description>A full-fledged HTTP/1.1 parser is just a function. I was bored on high-level web stuff and digged into one of the very basic of web technologies &amp;ndash; HTTP parser. I looked into Node.js&amp;rsquo;s HTTP Parser which is based on NGINX&amp;rsquo;s parser and figured it out that HTTP Parser is basically one simple function with a huge switch-case. It&amp;rsquo;s written in C and I reconstructed it in OCaml. I&amp;rsquo;m going to explain what it does in a simplified HTTP method parser example which is a subset of the full HTTP Parser.</description>
    </item>
    
  </channel>
</rss>